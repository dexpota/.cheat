<!-- vim: syntax=Markdown -->
# git

Create a new local branch from a remote one
```
$ git checkout --track origin/<ref>
```

Checkout and create a new branch
```
$ git checkout -b new-branch <ref>
```

Nice looking git log completed with stashes
```
$ git log --oneline --graph --decorate --all $(git reflog show --format="%h" stash)
```

Oneline log with a list of changed files
```
$ git log --name-status --pretty="%h%x09%ad%x09%ar%x09%s" --date=short
```

Show path and status of changed files
```
$ git log --name-status
```


Remove a file from the index and keeps it in the local filesystem
```
$ git rm --cached <file>
```

Rewind your current HEAD to the previous commit and preserves the changes in
your working directory
```
$ git reset --soft HEAD~1
```

Rewind your current HEAD to the previous commit and drop the changes
```
$ git reset --hard HEAD~1
```

Stash untracked files and unstaged files
```
$ git stash -k -u
```

Diff last commit with changes not yet staged
```
$ git diff
```

Diff last commit with staged changes
```
$ git diff --staged
```

Diff last commit with staged changes (synonym of --staged)
```
$ git diff --cached
```

Display a short-format version of your local repository status
```
$ git status -s
```

<!-- id: 10 -->
Rebase your current branch onto <target> branch
```
$ git checkout <branch>
$ git rebase origin/<remote>
```

Show a file at a specific version
```
git show <treeish>:<path>
```

Add a submodule to your repository
```
$ git submodule add <repository> [<path>]
```

Add a submodule to your repository with the given logical name
```
$ git submodule add <repository> [<path>] --name <logical>
```

List all repository's submodules
```
$ git submodule status
```

Initialize the submodules recorded in the index
```
$ git submodule init
```

Update the registered submodules, i.e. clone missing submodules and checkout
the commit specified in the index of the superproject
```
$ git submodule update [<path> ...]
```

Checkout the submodules to the remote tracking branch
```
$ git submodule update --remote
```

Initialize and clone the submodule
```
$ git submodule update --init
```

Clone a repository and download all submodules
```
$ git clone --recursive <url>
```

Return repository root directory
```
$ git rev-parse --show-toplevel
```

Amend the last commit without editing the message
```
$ git commit --amend --no-edit
```

Remove remote tracking branches
```
$ git remote prune origin
```
